{"version":3,"sources":["Emitter.js"],"names":["define","Emitter","prototype","on","event","listener","this","_eventCollection","push","once","self","fn","off","apply","arguments","listeners","undefined","forEach","i","splice","length","emit","_this","_len","args","Array","_key","slice"],"mappings":";;;;;;;AAAAA,UAAU,WAYR,SAASC,KA+HT,OAhHAA,EAAQC,UAAUC,GAAK,SAAYC,EAAOC,GAUxC,OARAC,KAAKC,iBAAmBD,KAAKC,qBAG7BD,KAAKC,iBAAiBH,GAASE,KAAKC,iBAAiBH,OAGrDE,KAAKC,iBAAiBH,GAAOI,KAAKH,GAE3BC,MAeTL,EAAQC,UAAUO,KAAO,SAAcL,EAAOC,GAC5C,IAAIK,EAAOJ,KAEX,SAASK,IACPD,EAAKE,IAAIR,EAAOO,GAChBN,EAASQ,MAAMP,KAAMQ,WAOvB,OAJAH,EAAGN,SAAWA,EAEdC,KAAKH,GAAGC,EAAOO,GAERL,MAeTL,EAAQC,UAAUU,IAAM,SAAaR,EAAOC,GAE1C,IAAIU,OAAYC,EAGhB,OAAKV,KAAKC,mBAAsBQ,EAAYT,KAAKC,iBAAiBH,KAIlEW,EAAUE,QAAQ,SAAUN,EAAIO,GAC1BP,IAAON,GAAYM,EAAGN,WAAaA,GAErCU,EAAUI,OAAOD,EAAG,KAKC,IAArBH,EAAUK,eACLd,KAAKC,iBAAiBH,GAGxBE,MAfEA,MA8BXL,EAAQC,UAAUmB,KAAO,SAAcjB,GAGrC,IAFA,IAAIkB,EAAQhB,KAEHiB,EAAOT,UAAUM,OAAQI,EAAOC,MAAMF,EAAO,EAAIA,EAAO,EAAI,GAAIG,EAAO,EAAGA,EAAOH,EAAMG,IAC9FF,EAAKE,EAAO,GAAKZ,UAAUY,GAG7B,IAAIX,OAAYC,EAGhB,OAAKV,KAAKC,mBAAsBQ,EAAYT,KAAKC,iBAAiBH,MAKlEW,EAAYA,EAAUY,MAAM,IAElBV,QAAQ,SAAUN,GAC1B,OAAOA,EAAGE,MAAMS,EAAOE,KAGlBlB,MAVEA,MAaJL","file":"../Emitter.js","sourcesContent":["define([],function(){\r\n  /**\r\n   * Creates a new instance of Emitter.\r\n   * @class\r\n   * @returns {Object} Returns a new instance of Emitter.\r\n   * @example\r\n   * // Creates a new instance of Emitter.\r\n   * var Emitter = require('emitter');\r\n   *\r\n   * var emitter = new Emitter();\r\n   */\r\n\r\n  function Emitter() {\r\n  }\r\n\r\n  /**\r\n   * Adds a listener to the collection for the specified event.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - A listener function to add.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Add an event listener to \"foo\" event.\r\n   * emitter.on('foo', listener);\r\n   */\r\n\r\n  Emitter.prototype.on = function on(event, listener) {\r\n    // Use the current collection or create it.\r\n    this._eventCollection = this._eventCollection || {};\r\n\r\n    // Use the current collection of an event or create it.\r\n    this._eventCollection[event] = this._eventCollection[event] || [];\r\n\r\n    // Appends the listener into the collection of the given event\r\n    this._eventCollection[event].push(listener);\r\n\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Adds a listener to the collection for the specified event that will be called only once.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - A listener function to add.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Will add an event handler to \"foo\" event once.\r\n   * emitter.once('foo', listener);\r\n   */\r\n\r\n  Emitter.prototype.once = function once(event, listener) {\r\n    var self = this;\r\n\r\n    function fn() {\r\n      self.off(event, fn);\r\n      listener.apply(this, arguments);\r\n    }\r\n\r\n    fn.listener = listener;\r\n\r\n    this.on(event, fn);\r\n\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Removes a listener from the collection for the specified event.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The event name.\r\n   * @param {Function} listener - A listener function to remove.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Remove a given listener.\r\n   * emitter.off('foo', listener);\r\n   */\r\n\r\n  Emitter.prototype.off = function off(event, listener) {\r\n\r\n    var listeners = undefined;\r\n\r\n    // Defines listeners value.\r\n    if (!this._eventCollection || !(listeners = this._eventCollection[event])) {\r\n      return this;\r\n    }\r\n\r\n    listeners.forEach(function (fn, i) {\r\n      if (fn === listener || fn.listener === listener) {\r\n        // Removes the given listener.\r\n        listeners.splice(i, 1);\r\n      }\r\n    });\r\n\r\n    // Removes an empty event collection.\r\n    if (listeners.length === 0) {\r\n      delete this._eventCollection[event];\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Execute each item in the listener collection in order with the specified data.\r\n   * @memberof! Emitter.prototype\r\n   * @function\r\n   * @param {String} event - The name of the event you want to emit.\r\n   * @param {...Object} data - Data to pass to the listeners.\r\n   * @returns {Object} Returns an instance of Emitter.\r\n   * @example\r\n   * // Emits the \"foo\" event with 'param1' and 'param2' as arguments.\r\n   * emitter.emit('foo', 'param1', 'param2');\r\n   */\r\n\r\n  Emitter.prototype.emit = function emit(event) {\r\n    var _this = this;\r\n\r\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n      args[_key - 1] = arguments[_key];\r\n    }\r\n\r\n    var listeners = undefined;\r\n\r\n    // Defines listeners value.\r\n    if (!this._eventCollection || !(listeners = this._eventCollection[event])) {\r\n      return this;\r\n    }\r\n\r\n    // Clone listeners\r\n    listeners = listeners.slice(0);\r\n\r\n    listeners.forEach(function (fn) {\r\n      return fn.apply(_this, args);\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  return Emitter;\r\n});"]}